// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/08/2024 22:40:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Compare_2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Compare_2_vlg_sample_tst(
	x,
	y,
	sampler_tx
);
input [1:0] x;
input [1:0] y;
output sampler_tx;

reg sample;
time current_time;
always @(x or y)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Compare_2_vlg_check_tst (
	equal,
	x_out,
	y_out,
	sampler_rx
);
input  equal;
input  x_out;
input  y_out;
input sampler_rx;

reg  equal_expected;
reg  x_out_expected;
reg  y_out_expected;

reg  equal_prev;
reg  x_out_prev;
reg  y_out_prev;

reg  equal_expected_prev;
reg  x_out_expected_prev;
reg  y_out_expected_prev;

reg  last_equal_exp;
reg  last_x_out_exp;
reg  last_y_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	equal_prev = equal;
	x_out_prev = x_out;
	y_out_prev = y_out;
end

// update expected /o prevs

always @(trigger)
begin
	equal_expected_prev = equal_expected;
	x_out_expected_prev = x_out_expected;
	y_out_expected_prev = y_out_expected;
end



// expected equal
initial
begin
	equal_expected = 1'bX;
end 

// expected x_out
initial
begin
	x_out_expected = 1'bX;
end 

// expected y_out
initial
begin
	y_out_expected = 1'bX;
end 
// generate trigger
always @(equal_expected or equal or x_out_expected or x_out or y_out_expected or y_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected equal = %b | expected x_out = %b | expected y_out = %b | ",equal_expected_prev,x_out_expected_prev,y_out_expected_prev);
	$display("| real equal = %b | real x_out = %b | real y_out = %b | ",equal_prev,x_out_prev,y_out_prev);
`endif
	if (
		( equal_expected_prev !== 1'bx ) && ( equal_prev !== equal_expected_prev )
		&& ((equal_expected_prev !== last_equal_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port equal :: @time = %t",  $realtime);
		$display ("     Expected value = %b", equal_expected_prev);
		$display ("     Real value = %b", equal_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_equal_exp = equal_expected_prev;
	end
	if (
		( x_out_expected_prev !== 1'bx ) && ( x_out_prev !== x_out_expected_prev )
		&& ((x_out_expected_prev !== last_x_out_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_out_expected_prev);
		$display ("     Real value = %b", x_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_x_out_exp = x_out_expected_prev;
	end
	if (
		( y_out_expected_prev !== 1'bx ) && ( y_out_prev !== y_out_expected_prev )
		&& ((y_out_expected_prev !== last_y_out_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_out_expected_prev);
		$display ("     Real value = %b", y_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y_out_exp = y_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Compare_2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] x;
reg [1:0] y;
// wires                                               
wire equal;
wire x_out;
wire y_out;

wire sampler;                             

// assign statements (if any)                          
Compare_2 i1 (
// port map - connection between master ports and signals/registers   
	.equal(equal),
	.x(x),
	.x_out(x_out),
	.y(y),
	.y_out(y_out)
);
// x[ 1 ]
initial
begin
	x[1] = 1'b0;
	x[1] = #100000 1'b1;
	x[1] = #100000 1'b0;
	x[1] = #100000 1'b1;
	x[1] = #100000 1'b0;
	x[1] = #100000 1'b1;
	x[1] = #100000 1'b0;
	x[1] = #100000 1'b1;
	x[1] = #200000 1'b0;
end 
// x[ 0 ]
initial
begin
	x[0] = 1'b0;
	x[0] = #200000 1'b1;
	x[0] = #400000 1'b0;
	x[0] = #300000 1'b1;
end 
// y[ 1 ]
initial
begin
	y[1] = 1'b0;
	y[1] = #100000 1'b1;
	y[1] = #400000 1'b0;
	y[1] = #200000 1'b1;
	y[1] = #100000 1'b0;
end 
// y[ 0 ]
initial
begin
	y[0] = 1'b1;
	y[0] = #100000 1'b0;
	y[0] = #100000 1'b1;
	y[0] = #100000 1'b0;
	y[0] = #300000 1'b1;
	y[0] = #100000 1'b0;
	y[0] = #100000 1'b1;
end 

Compare_2_vlg_sample_tst tb_sample (
	.x(x),
	.y(y),
	.sampler_tx(sampler)
);

Compare_2_vlg_check_tst tb_out(
	.equal(equal),
	.x_out(x_out),
	.y_out(y_out),
	.sampler_rx(sampler)
);
endmodule

